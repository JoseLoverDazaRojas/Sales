@page "/orders"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin, User")]

@if (Orders is null)
{
    <Loading />
}
else
{
    <GenericList MyList="Orders">
        <Body>
            <div class="card">
                <div class="card-header">
                    <span>
                        <i class="oi oi-dollar" /> Pedidos
                    </span>
                </div>
                <div class="card-body">
                    <Pagination CurrentPage="currentPage"
                                TotalPages="totalPages"
                                SelectedPage="SelectedPageAsync" />

                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Fecha</th>
                                <th>Usuario</th>
                                <th>Comentario</th>
                                <th>Estado</th>
                                <th>Líneas</th>
                                <th>Cantidad</th>
                                <th>Valor</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var sale in Orders)
                            {
                                <tr>
                                    <td>
                                        @($"{sale.Date:yyyy/MM/dd hh:mm tt}")
                                    </td>
                                    <td>
                                        @sale.User!.FullName
                                    </td>
                                    <td>
                                        @sale.Remarks
                                    </td>
                                    <td>
                                        @EnumHelper.GetEnumDescription(sale.OrderStatus)
                                    </td>
                                    <td>
                                        @sale.Lines
                                    </td>
                                    <td>
                                        @($"{sale.Quantity:N2}")
                                    </td>
                                    <td>
                                        @($"{sale.Value:C2}")
                                    </td>
                                    <td>
                                        <a href="/order/orderDetails/@sale.Id" class="btn btn-info btn-sm"><i class="oi oi-info" /> Detalles</a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </Body>
    </GenericList>
}

@code {
    private int currentPage = 1;
    private int totalPages;

    public List<Order>? Orders { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        var ok = await LoadListAsync(page);
        if (ok)
        {
            await LoadPagesAsync();
        }
    }

    private async Task<bool> LoadListAsync(int page)
    {
        var url = $"api/orders?page={page}";
        var response = await repository.GetAsync<List<Order>>(url);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return false;
        }
        Orders = response.Response;
        return true;
    }

    private async Task LoadPagesAsync()
    {
        var url = $"api/orders/totalPages";
        var response = await repository.GetAsync<int>(url);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        totalPages = response.Response;
    }
}